UDP
    client.c
        socket creation(sock dgram)
        server addr option setting
        sendto
        recvfrom
    server.c
        socket creation(sock dgram)
        server addr option setting
        bind
        {recvfrom
        sendto}
TCP
    client.c
        socket creation(sock stream)
        server addr option setting
        connect
        send
        recv
    server.c
        socket creation(sock stream)
        server addr option setting
        bind
        listen
        accept
        {recv
        send}

Necessary header files:
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>
    #include <arpa/inet.h>

Syntax:
    struct sockaddr_in server_addr;
    socket_desc = socket(AF_INET, SOCK_DGRAM, 0);//SOCK_STREAM
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2000);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");//INADDR_ANY
    socklen_t server_addr_len = sizeof(server_addr);
    sendto(socket_desc, sbuf, BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, server_addr_len);
    recvfrom(socket_desc, rbuf, BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, &server_addr_len);//recvfrom has &server_addr_len
    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr))
    connect(socket_desc, (struct sockaddr *)&server_addr, sizeof(server_addr))
    send(socket_desc, sbuf, BUFFER_SIZE, 0);
    recv(socket_desc, rbuf, BUFFER_SIZE, 0);
    listen(server_socket, 5);
    socklen_t addr_size = sizeof(client_addr);
    client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_size);




